%matplotlib inline # Importing slippy import slippy slippy.CUDA = False import slippy.surface as S import slippy.contact as C
radius = 0.01905       # The radius of the ball
load = 800             # The load on the ball in N
rolling_speed = 4      # The rolling speed in m/s (The mean speed of the surfaces)
youngs_modulus = 200e9 # The youngs modulus of the surfaces
p_ratio = 0.3          # The poission's ratio of the surfaces
grid_size = 65         # The number of points in the descretisation grid
eta_0 = 0.096          # Coefficient in the roelands pressure-viscosity equation
roelands_p_0 = 1/5.1e-9# Coefficient in the roelands pressure-viscosity equation
roelands_z = 0.68      # Coefficient in the roelands pressure-viscosity equation
# Solving the hertzian contact
hertz_result = C.hertz_full([radius, radius], [float('inf'), float('inf')], 
                            [youngs_modulus, youngs_modulus], 
                            [p_ratio, p_ratio], load)
hertz_pressure = hertz_result['max_pressure']
hertz_a = hertz_result['contact_radii'][0]
hertz_deflection = hertz_result['total_deflection']
hertz_pressure_function = hertz_result['pressure_f']
ball = S.RoundSurface((radius,)*3, shape = (grid_size, grid_size), 
                      extent=(hertz_a*4,hertz_a*4), generate = True)
flat = S.FlatSurface()
ball.show()
steel = C.Elastic('steel', {'E' : youngs_modulus, 'v' : p_ratio})
ball.material = steel
flat.material = steel
print(C.UnifiedReynoldsSolver.requires) # looking at the requires property of our chosen solver

oil = C.Lubricant('oil') # Making a lubricant object to contain our sub models
oil.add_sub_model('nd_viscosity', C.lubricant_models.nd_roelands(eta_0, roelands_p_0, hertz_pressure, roelands_z))
oil.add_sub_model('nd_density', C.lubricant_models.nd_dowson_higginson(hertz_pressure)) # adding dowson higginson
my_model = C.ContactModel('lubrication_test', ball, flat, oil)
reynolds = C.UnifiedReynoldsSolver(time_step = 0,
                                   grid_spacing = ball.grid_spacing,
                                   hertzian_pressure = hertz_pressure,
                                   radius_in_rolling_direction=radius,
                                   hertzian_half_width=hertz_a,
                                   dimentional_viscosity=eta_0,
                                   dimentional_density=872)
# Find the hertzian pressure distribution as an initial guess
X, Y = ball.get_points_from_extent()
X, Y = X + ball._total_shift[0], Y + ball._total_shift[1]
hertzian_pressure_dist = hertz_pressure_function(X, Y)

# Making the step object
step = C.IterSemiSystem('main', reynolds, rolling_speed, 1, no_time=True, normal_load=load,
                        initial_guess=[hertz_deflection, hertzian_pressure_dist],
                        relaxation_factor=0.05, max_it_interference=3000)

# Adding the step to the contact model
my_model.add_step(step)
my_model.data_check()
state = my_model.solve()
print(f"Result converged: {state['converged']}")
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
fig = plt.figure(figsize=(8,5))
ax = fig.gca(projection='3d')
ax.plot_trisurf(X.flatten()/hertz_a, Y.flatten()/hertz_a, state['nd_pressure'].flatten(), 
                cmap=plt.cm.viridis, linewidth=0.2)
ax.set_xlabel('ND length')
ax.set_ylabel('ND length')
ax.set_zlabel('ND pressure')
ax.set_title('Pressure distribution')
plt.show()
state['gap'][state['gap']<0.5e-9] = 0.5e-9 
plt.imshow(np.log(state['gap']))
plt.plot(X[:,0]/hertz_a,state['nd_pressure'][:,32], label='Lubricated')
plt.plot(X[:,0]/hertz_a,hertzian_pressure_dist[:,32]/hertz_pressure, label='Hertz')
ax = plt.gca()
ax.set_xlabel('Nondimensional length')
ax.set_ylabel('Nondimensional pressure')
ax.set_title('Central pressure distribution')
plt.plot(X[:,0]/hertz_a, state['gap'][:,32]/hertz_a)
ax = plt.gca()
ax.set_xlabel('Nondimensional length')
ax.set_ylabel('Nondimensional film thickness')
ax.set_title('Central film thickness')